{"version":3,"sources":["components/card/Card.js","containers/List.js","App.js","reportWebVitals.js","index.js"],"names":["Card","movie","className","src","Poster","alt","Title","width","Year","Type","API","List","state","data","searchTerm","error","loading","a","fetch","res","json","resJSON","this","setState","Search","e","preventDefault","onSubmit","handleSubmit","type","placeholder","onChange","target","value","autoFocus","map","i","React","Component","App","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPA0BeA,EAvBF,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACb,OACI,qBAAKC,UAAU,WAAf,SACI,sBAAKA,UAAU,OAAf,UACI,qBAAKC,IAAKF,EAAMG,OAAQC,IAAKJ,EAAMK,MAAOJ,UAAU,eAAeK,MAAM,QACzE,sBAAKL,UAAU,YAAf,UACE,+BAAKD,EAAMK,MAAX,IAAmBL,EAAMO,QACzB,4BAAIP,EAAMQ,gBCJpBC,EAAM,qDA6EGC,E,kDAvEb,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXC,KAAK,GACLC,WAAY,GACZC,MAAO,GACPC,SAAS,GANA,E,4FAUb,8BAAAC,EAAA,sEAEkBC,MAAM,GAAD,OAAIR,EAAJ,cAFvB,cAEMS,EAFN,gBAGuBA,EAAIC,OAH3B,OAGOC,EAHP,OAICC,KAAKC,SAAS,CAACV,KAAMQ,EAAQG,OAAQR,SAAS,IAJ/C,gD,uHAOA,WAAmBS,GAAnB,iBAAAR,EAAA,yDACEQ,EAAEC,iBACEJ,KAAKV,MAAME,WAFjB,yCAGWQ,KAAKC,SAAS,CAACR,MAAO,8BAHjC,uBAMoBG,MAAM,GAAD,OAAIR,EAAJ,cAAaY,KAAKV,MAAME,aANjD,cAMQK,EANR,gBAOqBA,EAAIC,OAPzB,WAOQP,EAPR,QASWW,OATX,0CAUWF,KAAKC,SAAS,CAACR,MAAO,0BAVjC,QAcEO,KAAKC,SAAS,CAACV,KAAMA,EAAKW,OAAQT,MAAO,GAAID,WAAY,KAd3D,iD,2EAiBA,WAAU,IAAD,OAEP,EAAwBQ,KAAKV,MAAtBC,EAAP,EAAOA,KACP,OADA,EAAaG,QAEJ,oBAAId,UAAU,aAAd,wBAKP,qCACM,qBAAKA,UAAU,MAAf,SACI,sBAAKA,UAAU,2BAAf,UACE,sBAAMyB,SAAU,SAACF,GAAD,OAAO,EAAKG,aAAaH,IAAzC,SACE,uBACAI,KAAK,OACL3B,UAAU,eACV4B,YAAY,SACZC,SAAU,SAAAN,GAAC,OAAI,EAAKF,SAAS,CAACT,WAAYW,EAAEO,OAAOC,SACnDA,MAAOX,KAAKV,MAAME,WAClBoB,WAAS,MAGX,mBAAGhC,UAAU,aAAb,SAA2BoB,KAAKV,MAAMG,MAAQO,KAAKV,MAAMG,MAAQ,UAGvE,qBAAKb,UAAU,MAAf,SAEQW,EAAKsB,KAAI,SAAClC,EAAOmC,GACjB,OAAO,cAAC,EAAD,CAAMnC,MAAOA,GAAYmC,e,GAhEjCC,IAAMC,WCaVC,EAnBH,WACV,OACI,qCACM,qBAAKrC,UAAU,4DAAf,SACE,mBAAGsC,KAAK,IAAItC,UAAU,eAAtB,wBAIA,sBAAMA,UAAU,UAAhB,SACI,qBAAKA,UAAU,YAAf,SACI,cAAC,EAAD,YCFPuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCCdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0c7cf57e.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Card = ({movie}) => {\r\n  return (\r\n      <div className=\"col-md-4\">\r\n          <div className=\"card\">\r\n              <img src={movie.Poster} alt={movie.Title} className=\"card-img-top\" width=\"100\"/>\r\n              <div className=\"card-body\">\r\n                <h4>{movie.Title} {movie.Year}</h4>\r\n                <p>{movie.Type}</p>\r\n              </div>\r\n          </div>\r\n      </div> \r\n  )\r\n}\r\n\r\nCard.propTypes = {\r\n  movie: PropTypes.shape({\r\n    Title: PropTypes.string,\r\n    Year: PropTypes.string,\r\n    Poster: PropTypes.string,\r\n    type: PropTypes.string,\r\n  }).isRequired\r\n}; \r\n\r\nexport default Card;","import React from 'react';\r\n\r\nimport Card from '../components/card/Card';\r\n\r\n//console.log(process.env.API);\r\n\r\nconst API = 'http://www.omdbapi.com/?i=tt3896198&apikey=e6db1a5'\r\n\r\n//const API = process.env.API;\r\n\r\nclass List extends React.Component{\r\n\r\n  constructor(){\r\n    super();\r\n    this.state = {\r\n      data:[],\r\n      searchTerm: '',\r\n      error: '',\r\n      loading: true\r\n    };\r\n  }\r\n  \r\n  async componentDidMount(){\r\n  // const res = await fetch('../../assets/data.json')\r\n  const res = await fetch(`${API}&s=batman`)\r\n   const resJSON = await res.json();  \r\n   this.setState({data: resJSON.Search, loading: false});\r\n  }\r\n\r\n  async handleSubmit(e){\r\n    e.preventDefault();\r\n    if(!this.state.searchTerm){\r\n      return this.setState({error: 'Place write a valid text'})\r\n    }\r\n\r\n    const res = await fetch(`${API}&s=${this.state.searchTerm}`)\r\n    const data = await res.json(); \r\n\r\n    if(!data.Search){\r\n      return this.setState({error: 'there are no results'});\r\n    }\r\n\r\n\r\n    this.setState({data: data.Search, error: '', searchTerm: ''}); \r\n  }\r\n\r\n  render() {\r\n\r\n    const {data, loading} = this.state;\r\n    if(loading){\r\n      return <h3 className=\"text-light\">loading...</h3>\r\n    }\r\n\r\n\r\n    return(\r\n      <>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-4 offset-md-4 p-4\">\r\n                  <form onSubmit={(e) => this.handleSubmit(e)}>\r\n                    <input \r\n                    type=\"text\" \r\n                    className=\"form-control\" \r\n                    placeholder=\"search\"\r\n                    onChange={e => this.setState({searchTerm: e.target.value})}\r\n                    value={this.state.searchTerm}\r\n                    autoFocus\r\n                     />\r\n                  </form>\r\n                  <p className=\"text-white\">{this.state.error ? this.state.error : ''}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n              {           \r\n                    data.map((movie, i) => {\r\n                    return <Card movie={movie} key={i}/>;\r\n                  })         \r\n              }\r\n          </div>  \r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nexport default List; ","import React from \"react\";\n//import React, {Fragment} from 'react';\nimport List from \"./containers/List\";\n\nconst App = () => {\n  return(\n      <>\n            <nav className=\"p-4 navbar navbar-dark bg-dark border-bottom border-white\">\n              <a href=\"/\" className=\"navbar-brand\">\n                MovieApp\n              </a>\n            </nav>\n              <main className=\"bg-dark\">\n                  <div className=\"container\">\n                      <List/>\n                  </div>\n            </main>\n      </>\n    \n  )\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootswatch/dist/lux/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}